from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Critica 
from libros.models import Libro
from .forms import Formulario_critica
from .forms_editar import Formulario_critica_editar
from django.contrib import messages


@login_required(login_url="/autenticacion/logear")
def critica_view(request):
    """
    üéØ Vista principal para crear cr√≠ticas de libros.
    
    Solo usuarios logueados pueden acceder (gracias al decorador).
    
    ‚úÖ Si es POST: intenta guardar una nueva cr√≠tica.
        - Si es v√°lida: redirige y muestra mensaje de √©xito.
        - Si no es v√°lida: avisa que ya existe una cr√≠tica para ese libro.
    
    üìñ Si es GET: muestra el formulario vac√≠o listo para rellenar.
    
    üß† Los libros mostrados son solo los marcados como 'le√≠do = True'.
    """

    if request.method == 'POST':
        form = Formulario_critica(request.POST)
        # Filtramos antes de validar para que solo muestre libros propios
        form.fields['id_libros'].queryset = Libro.objects.filter(
            leido=True,
            usuario=request.user
        )
        if form.is_valid():
            critica = form.save(commit=False)
            critica.usuario = request.user  # ‚úÖ Asignamos el usuario actual
            critica.save()
            messages.success(request, f'Cr√≠tica para "{critica.id_libros}" guardada correctamente.')
            return redirect('critica:critica')
        else:
            messages.warning(request, 'Ya existe una cr√≠tica para este libro.')
            form.fields['id_libros'].queryset = Libro.objects.filter(
              leido=True,
              usuario=request.user
            )
    else:
        form = Formulario_critica()
        form.fields['id_libros'].queryset = Libro.objects.filter(
          leido=True,
          usuario=request.user
        )

    # Mostramos solo las cr√≠ticas de libros le√≠dos
    criticas = Critica.objects.filter(
      id_libros__leido=True,
      usuario=request.user
    )

    return render(request, 'critica/critica.html', {
        'form': form,
        'criticas': criticas,
    })


@login_required(login_url="/autenticacion/logear")
def editar_critica(request, pk):
    """
    üõ†Ô∏è Edita una cr√≠tica existente.
    
    Busca la cr√≠tica por su clave primaria (pk), si no existe... ¬°Boom! 404.
    
    üîÅ Funciona tanto para mostrar el formulario (GET) como para actualizarlo (POST).
    """

    critica = get_object_or_404(Critica, pk=pk)

    if request.method == 'POST':
        form = Formulario_critica_editar(request.POST, request.FILES, instance=critica)
        if form.is_valid():
            form.save()
            messages.success(request, f'Cr√≠tica para "{critica.id_libros}" actualizada correctamente.')
            return redirect('critica:critica')
    else:
        form = Formulario_critica_editar(instance=critica)

    return render(request, 'critica/formulario.html', {
        'form': form,
        'titulo_libro': critica.id_libros.titulo
    })


@login_required(login_url="/autenticacion/logear")
def borrar_critica(request, pk):
    """
    üí• Elimina una cr√≠tica de forma segura.
    
    Muestra una confirmaci√≥n antes de borrar (GET), y borra realmente en POST.
    
    üóëÔ∏è Tambi√©n mostramos el t√≠tulo del libro asociado para hacer m√°s claro el mensaje.
    """

    critica = get_object_or_404(Critica, pk=pk)
    libro_titulo = critica.id_libros.titulo

    if request.method == 'POST':
        critica.delete()
        messages.success(request, f'Cr√≠tica para "{libro_titulo}" eliminada correctamente.')
        return redirect('critica:critica')

    return render(request, 'critica/confirmar_borrar.html', {'critica': critica})